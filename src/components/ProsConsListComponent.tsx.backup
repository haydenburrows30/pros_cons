'use client';

import { useState, useEffect, useRef } from 'react';
import type { ProsConsList, ProsConsItem } from '@/types';

interface ProsConsListComponentProps {
  list: ProsConsList;
  onUpdateList: (items: ProsConsItem[]        <div>
          <div className="bg-white p-3 text-center">
            <h2 className="text-base font-semibold text-gray-800">Pros</h2>
          </div>
          
          {/* Pros Header Row */}
          <div className="grid grid-cols-[1fr_auto_auto] gap-4 px-4 py-2 bg-gray-50 text-xs text-gray-500">id;
}

export function ProsConsListComponent({ list, onUpdateList }: ProsConsListComponentProps) {
  const [editingTextItem, setEditingTextItem] = useState<string | null>(null);
  const [editingWeightItem, setEditingWeightItem] = useState<string | null>(null);
  const [showWeightDropdown, setShowWeightDropdown] = useState<string | null>(null);
  const [editText, setEditText] = useState('');
  const [editWeight, setEditWeight] = useState(3);
  const weightSelectRef = useRef<HTMLSelectElement>(null);

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (showWeightDropdown) {
        const target = event.target as Element;
        if (!target.closest('.weight-dropdown')) {
          setShowWeightDropdown(null);
          setEditingWeightItem(null);
        }
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [showWeightDropdown]);

  const addItem = (type: 'pro' | 'con') => {
    const newItem: ProsConsItem = {
      id: Date.now().toString(),
      text: type === 'pro' ? `Pros Argument ${list.items.filter(i => i.type === 'pro').length + 1}` : `Cons Argument ${list.items.filter(i => i.type === 'con').length + 1}`,
      weight: 3,
      type,
    };
    onUpdateList([...list.items, newItem]);
  };

  const updateItemText = (itemId: string, text: string) => {
    onUpdateList(
      list.items.map(item =>
        item.id === itemId ? { ...item, text } : item
      )
    );
    setEditingTextItem(null);
  };

  const updateItemWeight = (itemId: string, weight: number) => {
    onUpdateList(
      list.items.map(item =>
        item.id === itemId ? { ...item, weight } : item
      )
    );
    setEditingWeightItem(null);
  };

  const deleteItem = (itemId: string) => {
    onUpdateList(list.items.filter(item => item.id !== itemId));
  };

  const startEditText = (item: ProsConsItem) => {
    setEditingTextItem(item.id);
    setEditText(item.text);
  };

  const startEditWeight = (item: ProsConsItem) => {
    setEditingWeightItem(item.id);
    setShowWeightDropdown(item.id);
    setEditWeight(item.weight);
  };

  const selectWeight = (itemId: string, weight: number) => {
    setEditWeight(weight);
    updateItemWeight(itemId, weight);
    setShowWeightDropdown(null);
  };

  const cancelEditText = () => {
    setEditingTextItem(null);
    setEditText('');
  };

  const cancelEditWeight = () => {
    setEditingWeightItem(null);
    setShowWeightDropdown(null);
    setEditWeight(1);
  };

  const pros = list.items.filter(item => item.type === 'pro');
  const cons = list.items.filter(item => item.type === 'con');

  const prosScore = pros.reduce((sum, item) => sum + item.weight, 0);
  const consScore = cons.reduce((sum, item) => sum + item.weight, 0);
  const totalScore = prosScore + consScore;
  const prosPercentage = totalScore > 0 ? Math.round((prosScore / totalScore) * 100) : 0;
  const consPercentage = totalScore > 0 ? Math.round((consScore / totalScore) * 100) : 0;

  return (
    <div className="bg-white max-w-5xl mx-auto">
      {/* Header */}
      <div className="text-center py-6 border-b border-gray-200">
        <h1 className="text-xl font-normal text-gray-900">{list.title || 'New pros and cons list'}</h1>
      </div>

      {/* Main Table */}
      <div className="grid grid-cols-2 gap-0">
        {/* Pros Column */}
        <div>
          <div className="bg-white p-3 text-center border-b border-gray-200">
            <h2 className="text-base font-semibold text-gray-800">Pros</h2>
          </div>
          
          {/* Pros Header Row */}
          <div className="grid grid-cols-[1fr_auto_auto] gap-4 px-4 py-2 bg-gray-50 border-b border-gray-200 text-xs text-gray-500">
            <div>Argument</div>
            <div className="text-center min-w-[80px]">Weight</div>
            <div className="w-8"></div>
          </div>          {/* Pros Items */}
          {pros.map((item) => (
            <div key={item.id} className="grid grid-cols-[1fr_auto_auto] gap-4 px-4 py-3 items-center hover:bg-gray-50">
              <div className="flex-1">
                {editingTextItem === item.id ? (
                  <input
                    type="text"
                    value={editText}
                    onChange={(e) => setEditText(e.target.value)}
                    className="w-full px-2 py-1 border border-gray-300 rounded text-sm"
                    onBlur={() => updateItemText(item.id, editText)}
                    onKeyPress={(e) => {
                      if (e.key === 'Enter') {
                        updateItemText(item.id, editText);
                      } else if (e.key === 'Escape') {
                        cancelEditText();
                      }
                    }}
                    autoFocus
                  />
                ) : (
                  <span
                    className="text-sm text-gray-800 cursor-pointer hover:text-blue-600"
                    onClick={() => startEditText(item)}
                  >
                    {item.text}
                  </span>
                )}
              </div>
              <div className="text-center">
                {editingWeightItem === item.id ? (
                  <div className="relative inline-block weight-dropdown">
                    <div 
                      className="text-gray-800 px-4 py-1.5 text-sm font-medium text-center min-w-[60px] cursor-pointer relative rounded"
                      style={{ 
                        backgroundColor: '#93c5fd'
                      }}
                      onClick={() => setShowWeightDropdown(showWeightDropdown === item.id ? null : item.id)}
                    >
                      {editWeight}
                      <svg className="absolute right-1.5 top-1/2 transform -translate-y-1/2 w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                        <path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" />
                      </svg>
                    </div>
                    {showWeightDropdown === item.id && (
                      <div 
                        className="absolute top-full left-0 bg-white border border-gray-200 rounded shadow-lg z-50 mt-1 min-w-[60px] overflow-hidden"
                      >
                        {[1, 2, 3, 4, 5].map(w => (
                          <div
                            key={w}
                            className="px-4 py-2 text-sm text-gray-800 hover:bg-blue-50 cursor-pointer text-center"
                            style={{ backgroundColor: w === editWeight ? '#dbeafe' : '#ffffff' }}
                            onClick={() => selectWeight(item.id, w)}
                          >
                            {w}
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                ) : (
                  <div 
                    className="text-gray-800 px-4 py-1.5 text-sm font-medium text-center min-w-[60px] inline-block cursor-pointer hover:opacity-80 relative rounded"
                    style={{ 
                      backgroundColor: '#93c5fd'
                    }}
                    onClick={() => startEditWeight(item)}
                  >
                    {item.weight}
                    <svg className="absolute right-1.5 top-1/2 transform -translate-y-1/2 w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" />
                    </svg>
                  </div>
                )}
              </div>
              <div className="flex justify-center items-center w-8">
                <button
                  onClick={() => deleteItem(item.id)}
                  className="text-gray-400 hover:text-gray-600 transition-colors p-1"
                  title="Delete"
                >
                  <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clipRule="evenodd" />
                  </svg>
                </button>
              </div>
            </div>
          ))}

          {/* Add Pro Button */}
          <div className="px-4 py-2">
            <button
              onClick={() => addItem('pro')}
              className="w-7 h-7 bg-white hover:bg-gray-50 border border-gray-300 rounded flex items-center justify-center text-gray-500 hover:text-gray-700 transition-colors text-lg font-light"
            >
              +
            </button>
          </div>
        </div>

        {/* Cons Column */}
        <div>
          <div className="bg-white p-3 text-center">
            <h2 className="text-base font-semibold text-gray-800">Cons</h2>
          </div>
          
          {/* Cons Header Row */}
          <div className="grid grid-cols-[1fr_auto_auto] gap-4 px-4 py-2 bg-gray-50 text-xs text-gray-500">
            <div>Argument</div>
            <div className="text-center min-w-[80px]">Weight</div>
            <div className="w-8"></div>
          </div>

          {/* Cons Items */}
          {cons.map((item) => (
            <div key={item.id} className="grid grid-cols-[1fr_auto_auto] gap-4 px-4 py-3 items-center hover:bg-gray-50">
              <div className="flex-1">
                {editingTextItem === item.id ? (
                  <input
                    type="text"
                    value={editText}
                    onChange={(e) => setEditText(e.target.value)}
                    className="w-full px-2 py-1 border border-gray-300 rounded text-sm"
                    onBlur={() => updateItemText(item.id, editText)}
                    onKeyPress={(e) => {
                      if (e.key === 'Enter') {
                        updateItemText(item.id, editText);
                      } else if (e.key === 'Escape') {
                        cancelEditText();
                      }
                    }}
                    autoFocus
                  />
                ) : (
                  <span
                    className="text-sm text-gray-800 cursor-pointer hover:text-blue-600"
                    onClick={() => startEditText(item)}
                  >
                    {item.text}
                  </span>
                )}
              </div>
              <div className="text-center">
                {editingWeightItem === item.id ? (
                  <div className="relative inline-block weight-dropdown">
                    <div 
                      className="text-gray-800 px-4 py-1.5 text-sm font-medium text-center min-w-[60px] cursor-pointer relative rounded"
                      style={{ 
                        backgroundColor: '#fde047'
                      }}
                      onClick={() => setShowWeightDropdown(showWeightDropdown === item.id ? null : item.id)}
                    >
                      {editWeight}
                      <svg className="absolute right-1.5 top-1/2 transform -translate-y-1/2 w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                        <path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" />
                      </svg>
                    </div>
                    {showWeightDropdown === item.id && (
                      <div 
                        className="absolute top-full left-0 bg-white border border-gray-200 rounded shadow-lg z-50 mt-1 min-w-[60px] overflow-hidden"
                      >
                        {[1, 2, 3, 4, 5].map(w => (
                          <div
                            key={w}
                            className="px-4 py-2 text-sm text-gray-800 hover:bg-yellow-50 cursor-pointer text-center"
                            style={{ backgroundColor: w === editWeight ? '#fef9c3' : '#ffffff' }}
                            onClick={() => selectWeight(item.id, w)}
                          >
                            {w}
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                ) : (
                  <div 
                    className="text-gray-800 px-4 py-1.5 text-sm font-medium text-center min-w-[60px] inline-block cursor-pointer hover:opacity-80 relative rounded"
                    style={{ 
                      backgroundColor: '#fde047'
                    }}
                    onClick={() => startEditWeight(item)}
                  >
                    {item.weight}
                    <svg className="absolute right-1.5 top-1/2 transform -translate-y-1/2 w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" />
                    </svg>
                  </div>
                )}
              </div>
              <div className="flex justify-center items-center w-8">
                <button
                  onClick={() => deleteItem(item.id)}
                  className="text-gray-400 hover:text-gray-600 transition-colors p-1"
                  title="Delete"
                >
                  <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clipRule="evenodd" />
                  </svg>
                </button>
              </div>
            </div>
          ))}

          {/* Add Con Button */}
          <div className="px-4 py-2">
            <button
              onClick={() => addItem('con')}
              className="w-7 h-7 bg-white hover:bg-gray-50 border border-gray-300 rounded flex items-center justify-center text-gray-500 hover:text-gray-700 transition-colors text-lg font-light"
            >
              +
            </button>
          </div>
        </div>
      </div>

      {/* Results Section */}
      <div className="px-6 py-6">
        <h2 className="text-lg font-semibold text-gray-800 mb-4 text-center">Result</h2>
        
        <div className="space-y-2">
          {/* Headers */}
          <div className="grid grid-cols-3 gap-6 text-xs text-gray-500 pb-2 border-b border-gray-200">
            <div>Name</div>
            <div>Percentage</div>
            <div>Points</div>
          </div>

          {/* Pros Row */}
          <div className="grid grid-cols-3 gap-6 items-center py-2.5 border-b border-gray-100">
            <div className="text-sm text-gray-700">Pros</div>
            <div className="relative">
              <div className="w-full h-8 bg-gray-200 overflow-hidden">
                <div 
                  className="h-full flex items-center justify-center text-sm font-medium text-white"
                  style={{ width: `${prosPercentage}%`, backgroundColor: '#60a5fa' }}
                >
                  {prosPercentage > 15 ? `${prosPercentage} %` : ''}
                </div>
              </div>
              {prosPercentage <= 15 && prosPercentage > 0 && (
                <div className="absolute left-full top-0 h-8 flex items-center pl-2 text-sm font-medium text-gray-700 whitespace-nowrap">
                  {prosPercentage} %
                </div>
              )}
            </div>
            <div className="text-sm text-gray-700">{prosScore}</div>
          </div>

          {/* Cons Row */}
          <div className="grid grid-cols-3 gap-6 items-center py-2.5">
            <div className="text-sm text-gray-700">Cons</div>
            <div className="relative">
              <div className="w-full h-8 bg-gray-200 overflow-hidden">
                <div 
                  className="h-full flex items-center justify-center text-sm font-medium text-gray-800"
                  style={{ width: `${consPercentage}%`, backgroundColor: '#fde047' }}
                >
                  {consPercentage > 15 ? `${consPercentage} %` : ''}
                </div>
              </div>
              {consPercentage <= 15 && consPercentage > 0 && (
                <div className="absolute left-full top-0 h-8 flex items-center pl-2 text-sm font-medium text-gray-700 whitespace-nowrap">
                  {consPercentage} %
                </div>
              )}
            </div>
            <div className="text-sm text-gray-700">{consScore}</div>
          </div>
        </div>

        {/* Action Buttons */}
        <div className="flex justify-end gap-3 mt-6">
          <button className="px-5 py-2 bg-white text-gray-700 text-sm rounded border border-gray-300 hover:bg-gray-50 transition-colors shadow-sm">
            Share
          </button>
          <button className="px-5 py-2 bg-white text-gray-700 text-sm rounded border border-gray-300 hover:bg-gray-50 transition-colors shadow-sm">
            Close
          </button>
        </div>
      </div>
    </div>
  );
}